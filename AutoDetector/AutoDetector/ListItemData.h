//*****************************************************************************
// 文件名 : ListItemData.h
// 
// 类名   : 自定义列表视图CCustomListCtrl控件项的数据类
// 
// 更新日期     修订人       修改内容         
// ------------------------------------------
// 2013-10       崔志雷       新建
// ------------------------------------------
// 备注：
// ------------------------------------------
// 
//*****************************************************************************

#pragma once
#include "Types.h"
#include <vector>

using namespace std;
// 列属性
enum ColumnProperties
{
	CanNotChange = 0,    // 值不可更改
	DiretEditable,		 // 值可直接编辑，单击某单元格时，可直接显示编辑控件
	PromptEditable,		 // 值可提示编辑：当单击某单元格时，可显示“编辑”按钮
	DeletePrompt,		 // 值可提示删除：当单击某单元格时，可显示“删除”按钮
	Optional,			 // 可选择：当单击某单元格时，可显示组合框
	VariableSize,        // 大小可变：当单击某单元格时，可显示微调按钮
	VariableDate         // 日期可变：当单击某单元格时，可显示日期控件
};

class CListItemData
{
public:
	CListItemData(void) {m_IsHighlight = false;}
	virtual ~CListItemData(void) {}

public:
	// ---------------------------------------------------------------------------
	// 摘要：
	//     判断本项某字段是否与另外某项数据同字段相等，
	//     当相等时，绘制表格时需要合并为一个单元格
	// 参数：
	//     1.ColumnIndex - 列索引
	//     2.pItemData - 上列表项数据指针
	// ---------------------------------------------------------------------------
	virtual bool IsFieldEquivalent(const int &ColumnIndex,const CListItemData * pItemData) = 0;

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得某单元格文本内容
	// 参数：
	//     1.ColumnIndex - 列索引
	//     2.contex - 文本内容
	// 返回值：
	//     文本对齐格式
	// ---------------------------------------------------------------------------
	virtual UINT GetCellContex(const int &ColumnIndex,CString & contex) = 0;

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得子项目个数
	// ---------------------------------------------------------------------------
	virtual inline int GetSubItemCount() = 0;

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得某列属性
	// ---------------------------------------------------------------------------
	virtual ColumnProperties GetColumnProperties(const int &ColumnIndex) = 0;

public:
	// ---------------------------------------------------------------------------
	// 摘要：
	//     判断本项是否大于另外某项数据,如果是，则需要把本数据与pItemData交换顺序
	// 参数：
	//     1.pItemData - 比较项指针
	// ---------------------------------------------------------------------------
	virtual bool IsBeforThan(const CListItemData * pItemData)
	{
		return false;
	}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     改变排序方式函数
	// 参数：
	//     1.col - 列索引
	// 返回值：
	//     如果输入col可以作为排序列，则返回ture否则返回false
	// ---------------------------------------------------------------------------
	virtual bool ChangeSortMode(const int & col)
	{return false;}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     编辑控件内容更新响应函数
	// 参数：
	//     1.ColumnIndex - 列索引
	//     2.contex - 文本内容
	// ---------------------------------------------------------------------------
	virtual void OnEnChange(const int &ColumnIndex,const CString & newContex)
	{}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得组合框属性,如果某列的属性是Optional，则调用此函数获得组合框选项
	//     1.ColumnIndex - 列索引，如果此列不是Optional，则返回false
	//     2.strOptions - 下拉后显示选项内容
	//     3.nDefaultSelectedIndex - 默认选中索引
	//     4.bIsEditable - 是否可编辑
	// ---------------------------------------------------------------------------
	virtual bool GetComboxProperties(const int &ColumnIndex,
									 vector<CString>&strOptions,
									 int &nDefaultSelectedIndex,
									 bool &bIsEditable)
	{
		return false;
	}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     组合框控件选项更新响应函数
	// 参数：
	//     1.ColumnIndex - 列索引
	//     2.newSelectedIndex - 新选项索引
	// ---------------------------------------------------------------------------
	virtual void OnCbnSelchange(const int &ColumnIndex,const int & newSelectedIndex)
	{}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得微调按钮的属性
	//     1.ColumnIndex - 列索引，如果此列不是Spin，则返回false
	//     2.fInitial - 初始值
	//     3.lower - 取值范围下限
	//     4.upper - 取值范围上限
	//     5.increament - 按钮单击增量
	// ---------------------------------------------------------------------------
	virtual bool GetSpinBtnProperties(const int &ColumnIndex,
									  double &initial,
									  double &lower, 
									  double &upper,
									  double &increament)
	{
		return false;
	}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得时间控件的属性
	//     1.ColumnIndex - 列索引，如果此列不是DateCtrl，则返回false
	//     2.fInitial - 初始值
	// ---------------------------------------------------------------------------
	virtual bool GetDateCtrlProperties(const int &ColumnIndex,COleDateTime &initial)
	{
		return false;
	}
	
	// ---------------------------------------------------------------------------
	// 摘要：
	//     组合框控件选项更新响应函数
	// 参数：
	//     1.ColumnIndex - 列索引
	//     2.newDate - 新选项索引
	// ---------------------------------------------------------------------------
	virtual void OnDtnchange(const int &ColumnIndex,const COleDateTime & newDate)
	{}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得key值，由于有的列表无需key值，所以本函数不是纯虚函数
	// ---------------------------------------------------------------------------
	virtual uint32 GetKey(){ return 0;};

public:
	// ---------------------------------------------------------------------------
	// 摘要：
	//     设置本条目选中状态
	// ---------------------------------------------------------------------------
	virtual void SetHighlightState(bool state){m_IsHighlight = state;}

	// ---------------------------------------------------------------------------
	// 摘要：
	//     取得本条目选中状态
	// ---------------------------------------------------------------------------
	virtual bool IsHighlight(){return m_IsHighlight;}

protected:
	bool m_IsHighlight;							// 保存当前条目是否处于被选中状态,用来反向控制控件的选中状态,但是子类可能不用此变量保存选中状态
};
