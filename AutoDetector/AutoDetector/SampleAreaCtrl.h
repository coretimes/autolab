//*****************************************************************************
// 文件名 : SampleAreaCtrl.h
// 
// 类名   : 样本区示意图控件
// 
// 更新日期     修订人       修改内容         
// ------------------------------------------
// 2013-10       崔志雷       新建
// ------------------------------------------
// 备注：
// ------------------------------------------
// 1.构成：
//	 负责样本区示意图的绘制，样本区数据组成参见 “样本区数据类”文件SampleAreaData.h
// 2.当鼠标指针指向某个节点时，能动态显示该节点信息提示
//
//*****************************************************************************

#pragma once
#include "SampleAreaData.h"
#include "ReagentAreaData.h"

//*******************************************
// 节点选择模式：
// 为了使样本节点和标准品节点不能同时被选择
//*******************************************
enum SelectMode										
{
	NoneSelected = 0,								// 没有选择
	EmptyNode,										// 空节点选择
	StanderdNode,									// 标准品节点选择
	SampleNode										// 样本节点选择
};

//*******************************************************
// 控件类型
// 在“概况”窗口的控件，作用仅仅是为了显示，不能用来配置
// 在“测试”窗口的控件，作用可用来配置
//*******************************************************
enum SAControlType
{
	saForConfig = 0,
	saForShowing
};

//*********************************
// 样本区示意图控件类
//*********************************
class CSampleAreaCtrl : public CStatic
{
	DECLARE_DYNAMIC(CSampleAreaCtrl)

public:
	CSampleAreaCtrl(const SAControlType & ctType);
	virtual ~CSampleAreaCtrl();
public:
	// --------------------------------------------------
	// 摘要：
	//	   重绘pos位置的节点
	// --------------------------------------------------
	void InvalidNode(const Sample_Pos & pos)
	{
		if(pos > 0 && pos < NUM_SAMPLEPOS)
		{
			int col,row;
			m_pSampleAreaData->GetCoordByNum(pos,col,row);
			_InvalidNode(col,row);
		}
	}
protected:
	DECLARE_MESSAGE_MAP()
	afx_msg void OnPaint();
	afx_msg BOOL OnEraseBkgnd(CDC* pDC);
	// --------------------------------------------------
	// 摘要：
	//	   鼠标移动事件响应
	// --------------------------------------------------
 	afx_msg void OnMouseMove(UINT nFlags, CPoint point);

	// --------------------------------------------------
	// 摘要：
	//	   鼠标离开事件响应
	// --------------------------------------------------
	afx_msg LRESULT OnMouseLeave(WPARAM wParam, LPARAM lParam);

	// --------------------------------------------------
	// 摘要：
	//	   鼠标左键按下事件响应
	// --------------------------------------------------
	afx_msg void OnLButtonDown(UINT nFlags, CPoint point);

	// --------------------------------------------------
	// 摘要：
	//	   鼠标左键抬起事件响应
	// --------------------------------------------------
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	// --------------------------------------------------
	// 摘要：
	//	   鼠标右击事件响应
	// --------------------------------------------------
	afx_msg void OnRButtonUp(UINT nFlags, CPoint point);

	// --------------------------------------------------
	// 摘要：
	//	   “取消选择”事件响应
	// --------------------------------------------------
	afx_msg void OnClickMenuCancelAllSelect();

	// --------------------------------------------------
	// 摘要：
	//	   “样本配置”菜单响应
	// --------------------------------------------------
	afx_msg void OnClickMenuSampleConfig();

	// --------------------------------------------------
	// 摘要：
	//	   “标准品配置”菜单响应
	// --------------------------------------------------
	afx_msg void OnClickMenuStandardCongfig();

	// --------------------------------------------------
	// 摘要：
	//	   “删除样本(标准品)测试”菜单响应
	// --------------------------------------------------
	afx_msg void OnClickMenuDeleteSample();

	// --------------------------------------------------
	// 摘要：
	//	   窗口大小发生改变消息响应
	// --------------------------------------------------
	afx_msg void OnSize(UINT nType, int cx, int cy);

	// --------------------------------------------------
	// 摘要：
	//	   CToolTipCtrl 控件的的TTN_NEEDTEX消息响应，取得提示文本
	// --------------------------------------------------
	afx_msg BOOL OnToolTipNotify(UINT id,NMHDR * pTTTStruct,LRESULT * pResult);

	virtual void PreSubclassWindow();
	virtual BOOL PreTranslateMessage(MSG* pMsg);

private:
	// --------------------------------------------------
	// 摘要：
	//	   绘制控件主体图
	// --------------------------------------------------
	void _DrawFrame(CDC *pDC);

	// --------------------------------------------------
	// 摘要：
	//	   根据编号取得节点矩形
	// 参数：
	//     1.col - 二维坐标的列编号
	//     2.row - 二维坐标的行编号
	//     3.rect - 输出用矩形
	// --------------------------------------------------
	void _GetNodeRect(const int &col, const int &row,RECT & rect) const;

	// --------------------------------------------------
	// 摘要：
	//	   绘制各节点
	// 参数：
	//     1.col - 二维坐标的列编号
	//     2.row - 二维坐标的行编号
	// --------------------------------------------------
	void _DrawNode(const int &col, const int &row,CDC *pDC);

	// --------------------------------------------------
	// 摘要：
	//	   使某指定节点和对应标题节点显示无效，并重新绘制
	// 参数：
	//     1.col - 二维坐标的列编号
	//     2.row - 二维坐标的行编号
	// --------------------------------------------------
	void _InvalidNode(const int &col, const int &row);

	// --------------------------------------------------
	// 摘要：
	//	   根据像素坐标判断位置坐标 
	// 参数：
	//     1.pt - 像素坐标点
	//     2.col - 返回的二维坐标的列编号,如果点在有效区域外，则返回负值；col == 0时，表示行标题
	//     3.row - 返回的二维坐标的行编号,如果点在有效区域外，则返回负值；row == NUM + 1时，表示列标题
	// --------------------------------------------------
	void _WhichNode(const CPoint & pt, int &col, int &row) const;

	// --------------------------------------------------
	// 摘要：
	//	   显示菜单函数
	// --------------------------------------------------
	void _DisplayMenu();

	// --------------------------------------------------
	// 摘要：
	//	   显示菜单风格的提示
	// --------------------------------------------------
	void _DisplayPromptMenu();

	// --------------------------------------------------
	// 摘要：
	//	   更新指定节点的标准品提示文本
	// --------------------------------------------------
	BOOL _UpdateStandardTipText(const SampleConfigNode * pNode);

	// --------------------------------------------------
	// 摘要：
	//	   更新指定节点的样本提示文本
	// --------------------------------------------------
	BOOL _UpdateSampleTipText(const SampleConfigNode * pNode);

	// --------------------------------------------------
	// 摘要：
	//	   单击样本区示意图列标题的响应函数
	// 参数：
	//     1.col - 列索引
	// --------------------------------------------------
	void _OnClickColumnHeader(const int &col);

	// --------------------------------------------------
	// 摘要：
	//	   单击样本区示意图空节点的响应函数
	// 参数：
	//     1.col - 列索引
	// --------------------------------------------------
	void _OnClickEmptyNode(const int & col, const int &row);

	// --------------------------------------------------
	// 摘要：
	//	   单击样本区示意图标准品节点的响应函数
	// 参数：
	//     1.col - 列索引
	//     1.row - 行索引
	// --------------------------------------------------
	void _OnClickStanderdNode(const int & col, const int &row);

	// --------------------------------------------------
	// 摘要：
	//	   单击样本区示意图样本节点的响应函数
	// 参数：
	//     1.col - 列索引
	//     1.row - 行索引
	// --------------------------------------------------
	void _OnClickSampleNode(const int & col, const int &row);

	// --------------------------------------------------
	// 摘要：
	//	   有效节点单击公用处理函数
	// 参数：
	//     1.col - 列索引
	//     1.row - 行索引
	// --------------------------------------------------
	void _NodeClickProcess(const int & col, const int &row);

	// --------------------------------------------------
	// 摘要：
	//	   判断某节点是否有资格被选中，即判断此节点与当前选择状态是否相符
	// 参数：
	//     1.col - 二维坐标的列编号
	//     2.row - 二维坐标的行编号
	// 返回：
	//     选择状态
	// --------------------------------------------------
	bool _IsNodeCouldSelected(int col, int row);

private:
	CRect m_rcClient;									// 控件节点区域矩形
	CRect m_rcNodesRegion;								// 控件节点区域矩形
	CRect m_rcTitleRegion;								// 控件标题区域矩形

	bool m_IsLButtonDown;								// 标记左按键是否按下
	bool m_SelectState[NUM_COL][NUM_ROW];				// 原节点选择状态，在连选时，用于取消最后一次选择
	bool m_LastSelectCancel;							// 是否能取消最后一次选择标志,true为能，false不能
	Sample_Pos m_SelectStartPos;						// 连选起始坐标
	CToolTipCtrl * m_pToolTip;							// 动态提示控件
	CMenu * m_pMenu;									// 菜单指针
	bool m_bMouseTrack;									// 标识是否追踪当前鼠标状态，之所以要这样定义
														// 是要避免鼠标已经在窗体之上时，
														// 一移动鼠标就不断重复产生 WM_MOUSEHOVER

	SelectMode m_CurrenSelectedMode;					// 当前节点选择模式	
	Standard_Key m_CurrenSelectedStanderdKey;			// 当前选择的标准品
	map<Sample_Pos,CString> m_mapToolTipTexts;			// 保存每个节点的提示文本

private:
	CSampleAreaData * m_pSampleAreaData;
	CReagentAreaData * m_pReagentAreaData;
private:
	SAControlType m_ControlType;						// 在“概况”窗口的“样本区控件”只起到提示作用，不允许选择和修改等
														// 在“测试”窗口中的“样本区控件”允许选择修改
};
